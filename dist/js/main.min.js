/*
 noix 2016-09-26 
*/
var TETRIS = function() {
    var _debugMode = false;
    var _this = {};
    var _modules = {};
    var _events = {};
    var _canvas, _ctx;
    var _gridData = {};
    var _gameState = "IS_PLAYING";
    var _debug = function(msg, type) {
        var _type = type || "log";
        if (_debugMode) console[_type](msg);
    };
    var _registerModule = function(_module, _constructor) {
        if (typeof _module != "string" || typeof _constructor != "function") {
            _debug("Invalid parameters : Failed to create Module " + _module, "error");
            return false;
        }
        _modules[_module] = {
            construct: _constructor,
            instance: null
        };
    };
    var _initModule = function(_module) {
        if (typeof _module != "string" || typeof _modules[_module] == "undefined") {
            _debug("Failed to start module " + _module, "error");
            return false;
        }
        _modules[_module].instance = _modules[_module].construct(TETRIS_SANDBOX.create(_this, _module));
        _modules[_module].instance.init();
    };
    var _initAllModules = function() {
        for (var module in _modules) {
            _initModule(module);
        }
    };
    var _destroyModule = function(_module) {
        if (typeof _module != "string" || typeof _modules[_module] == "undefined") {
            _debug("Failed to stop module " + _module, "error");
            return false;
        }
        _modules[_module].instance.destroy();
        _modules[_module].instance = null;
    };
    var _destroyAllModules = function() {
        for (var module in _modules) {
            _destroyModule(module);
        }
    };
    var _subscribeEvent = function(_event, _callback) {
        if (typeof _event != "string" || typeof _callback != "function") {
            _debug("Invalid parameters : Failed to create Event " + _event, "error");
            return false;
        }
        if (typeof _events[_event] == "undefined") _events[_event] = [];
        _events[_event].push(_callback);
    };
    var _publishEvent = function(_event, _data) {
        if (typeof _event != "string") {
            _debug("Failed to trigger Event " + _event, "error");
            return false;
        }
        if (typeof _events[_event] == "undefined") {
            _debug('Event "' + _event + "\" hasn't been created yet", "warn");
            return false;
        }
        for (var i = 0; i < _events[_event].length; i++) {
            _events[_event][i].apply({}, _data);
        }
    };
    var _addEventListener = function(dom, type, event) {
        dom.addEventListener(type, event);
    };
    var _removeEventListener = function(dom, type, event) {
        dom.removeEventListener(type, event);
    };
    var _checkCell = function(x, y) {
        if (y <= 0 || typeof _gridData.grid == "undefined") return 0;
        return _gridData.grid[y / _gridData.cellSize][x / _gridData.cellSize];
    };
    var _getGridData = function() {
        return _gridData;
    };
    var _setGridData = function(key, data) {
        _gridData[key] = data;
    };
    var _createCanvas = function(cvsId, w, h) {
        _canvas = document.createElement("canvas");
        _ctx = _canvas.getContext("2d");
        _canvas.width = w;
        _canvas.height = h;
        document.getElementById(cvsId).appendChild(_canvas);
    };
    var _clearCanvas = function() {
        _canvas.width = _canvas.width;
    };
    var _drawRect = function(x, y, w, h, c) {
        _ctx.rect(x, y, w, h);
        _ctx.fillStyle = c;
        _ctx.fillRect(x, y, w, h);
        _ctx.strokeStyle = "#fff";
        _ctx.stroke();
    };
    var _getGameState = function() {
        return _gameState;
    };
    var _setGameState = function(state) {
        _gameState = state;
    };
    var _initGame = function(cvsId, w, h, c) {
        _createCanvas(cvsId, w, h);
        _gridData = {
            width: w,
            height: h,
            cellSize: c,
            rows: _canvas.height / c,
            cols: _canvas.width / c
        };
    };
    var _startGame = function() {
        _publishEvent("game-start");
    };
    var _replayGame = function() {
        _publishEvent("game-start");
    };
    var _gameOver = function() {
        _publishEvent("game-over");
    };
    _this = {
        registerModule: _registerModule,
        initModule: _initModule,
        initAllModules: _initAllModules,
        destroyModule: _destroyModule,
        destroyAllModules: _destroyAllModules,
        subscribeEvent: _subscribeEvent,
        publishEvent: _publishEvent,
        addEventListener: _addEventListener,
        removeEventListener: _removeEventListener,
        createCanvas: _createCanvas,
        clearCanvas: _clearCanvas,
        drawRect: _drawRect,
        checkCell: _checkCell,
        getGridData: _getGridData,
        setGridData: _setGridData,
        getGameState: _getGameState,
        setGameState: _setGameState,
        initGame: _initGame,
        startGame: _startGame,
        replayGame: _replayGame
    };
    return _this;
}();

var TETRIS_SANDBOX = function() {
    var _core, _module;
    var _subscribeEvent = function(event, callback) {
        _core.subscribeEvent(event, callback);
    };
    var _publishEvent = function(event, data) {
        _core.publishEvent(event, data);
    };
    var _addEventListener = function(dom, type, event) {
        _core.addEventListener(dom, type, event);
    };
    var _removeEventListener = function(dom, type, event) {
        _core.removeEventListener(dom, type, event);
    };
    var _clearCanvas = function() {
        _core.clearCanvas();
    };
    var _drawRect = function(x, y, w, h, c) {
        _core.drawRect(x, y, w, h, c);
    };
    var _checkCell = function(x, y) {
        return _core.checkCell(x, y);
    };
    var _checkRows = function() {
        return _core.checkRows();
    };
    var _setGridData = function(key, data) {
        return _core.setGridData(key, data);
    };
    var _getGridData = function() {
        return _core.getGridData();
    };
    var _setGameState = function(state) {
        return _core.setGameState(state);
    };
    var _getGameState = function() {
        return _core.getGameState();
    };
    var _create = function(core, module) {
        _core = core;
        _module = module;
        return {
            subscribeEvent: _subscribeEvent,
            publishEvent: _publishEvent,
            addEventListener: _addEventListener,
            removeEventListener: _removeEventListener,
            clearCanvas: _clearCanvas,
            drawRect: _drawRect,
            checkCell: _checkCell,
            checkRows: _checkRows,
            setGridData: _setGridData,
            getGridData: _getGridData,
            getGameState: _getGameState,
            setGameState: _setGameState
        };
    };
    return {
        create: _create
    };
}();

TETRIS.registerModule("game-controller", function(sb) {
    var btnPlay, btnRewind, btnStop;
    var isPlaying = false;
    var isPaused = false;
    var _changeGameState = function(state) {
        switch (state) {
          case "RESET":
            break;

          case "PLAY":
            break;

          case "PAUSE":
            break;

          case "REWIND":
            break;

          case "STOP":
            break;
        }
    };
    var _playGame = function(e) {
        if (!isPlaying) {
            sb.publishEvent("game-stateChange", [ "game-reset" ]);
            setTimeout(function() {
                sb.publishEvent("game-stateChange", [ "game-play" ]);
            }, 2500);
        } else {
            if (isPaused) {
                sb.publishEvent("game-stateChange", [ "game-resume" ]);
            } else {
                sb.publishEvent("game-stateChange", [ "game-pause" ]);
            }
        }
    };
    var _rewindGame = function(e) {
        if (isPlaying) {
            sb.publishEvent("game-stateChange", [ "game-rewind" ]);
        }
    };
    var _resumeGame = function(e) {
        if (isPlaying) {
            sb.publishEvent("game-stateChange", [ "game-resume" ]);
        }
    };
    var _stopGame = function(e) {
        if (isPlaying) {
            sb.publishEvent("game-stateChange", [ "game-stop" ]);
        }
    };
    var _onGameStateChange = function(state) {
        console.log("state", state);
        switch (state) {
          case "game-reset":
            isPlaying = false;
            isPaused = false;
            btnPlay.innerHTML = "START";
            sb.removeEventListener(btnPlay, "click", _playGame);
            break;

          case "game-play":
            isPlaying = true;
            isPaused = false;
            btnPlay.innerHTML = "PAUSE";
            sb.addEventListener(btnPlay, "click", _playGame);
            break;

          case "game-pause":
            isPaused = true;
            btnPlay.innerHTML = "PLAY";
            sb.addEventListener(btnPlay, "click", _playGame);
            break;

          case "game-resume":
            isPaused = false;
            isPlaying = true;
            btnPlay.innerHTML = "PAUSE";
            sb.addEventListener(btnPlay, "click", _playGame);
            break;

          case "game-stop":
            isPlaying = false;
            isPaused = false;
            btnPlay.innerHTML = "START";
            break;
        }
    };
    var _init = function() {
        btnPlay = document.getElementById("btn-play");
        sb.addEventListener(btnPlay, "click", _playGame);
        btnStop = document.getElementById("btn-stop");
        sb.addEventListener(btnStop, "click", _stopGame);
        sb.subscribeEvent("game-stateChange", _onGameStateChange);
    };
    var _destroy = function() {};
    return {
        init: _init,
        destroy: _destroy
    };
});

TETRIS.registerModule("game-keeper", function(sb) {
    var _score = 0, _level = 1, _clearedRows = 0, _diffTreshhold = 5;
    var _updateGame = function(numRows) {
        _score += 101 * numRows + (numRows - 1) * 101;
        console.log(_score, numRows);
        document.getElementById("score").innerHTML = "Score: " + _score;
        _clearedRows++;
        if (_level != Math.floor(_clearedRows / _diffTreshhold) + 1) {
            _level = Math.floor(_clearedRows / _diffTreshhold) + 1;
            document.getElementById("level").innerHTML = "Level: " + _level;
            sb.publishEvent("level-up");
        }
    };
    var _onGameStateChange = function(state) {
        switch (state) {
          case "game-reset":
            _score = 0;
            _level = 1;
            _clearedRows = 0;
            document.getElementById("score").innerHTML = "Score: " + _score;
            document.getElementById("level").innerHTML = "Level: " + _level;
            break;
        }
    };
    var _init = function() {
        sb.subscribeEvent("row-cleared", _updateGame);
        sb.subscribeEvent("game-stateChange", _onGameStateChange);
    };
    var _destroy = function() {};
    return {
        init: _init,
        destroy: _destroy
    };
});

TETRIS.registerModule("game-loop", function(sb) {
    var _animID;
    var _lastRenderTime, _lastUpdateTime, _delta, _currentTime;
    var _fps = 1e3 / 15;
    var _ups = 1e3 / 30;
    var _isPaused = false;
    var _gameState = "";
    var _loop = function() {
        _currTime = new Date().getTime();
        switch (_gameState) {
          case "IS_PLAYING":
            _delta = _currTime - _lastUpdateTime;
            if (_delta > _ups) {
                sb.publishEvent("game-update");
                _lastUpdateTime = _currTime;
            }
            break;
        }
        _delta = _currTime - _lastRenderTime;
        if (_delta > _fps) {
            sb.clearCanvas();
            sb.publishEvent("game-render");
            _lastRenderTime = _currTime;
        }
        _animID = window.requestAnimationFrame(_loop);
    };
    var _onGameStateChange = function(state) {
        switch (state) {
          case "game-play":
          case "game-resume":
            _gameState = "IS_PLAYING";
            break;

          case "game-pause":
            _gameState = "IS_PAUSED";
            break;
        }
    };
    var _init = function() {
        _lastRenderTime = _lastUpdateTime = new Date().getTime();
        sb.subscribeEvent("game-stateChange", _onGameStateChange);
        if (!_animID) window.requestAnimationFrame(_loop);
    };
    var _destroy = function() {
        if (_animID) window.cancelAnimationFrame(_animID);
    };
    return {
        init: _init,
        destroy: _destroy
    };
});

TETRIS.registerModule("grid", function(sb) {
    var _grid = [];
    var _grenadeDrop, _sigilFix;
    var _gameSoundStart, _gameSoundOver;
    var _drawGrid = function() {
        var r, c;
        for (r = 0; r < sb.getGridData().rows; r++) {
            for (c = 0; c < sb.getGridData().cols; c++) {
                if (sb.getGridData().grid[r][c] === 1) {
                    sb.drawRect(c * sb.getGridData().cellSize, r * sb.getGridData().cellSize, sb.getGridData().cellSize, sb.getGridData().cellSize, "#333");
                } else {
                    sb.drawRect(c * sb.getGridData().cellSize, r * sb.getGridData().cellSize, sb.getGridData().cellSize, sb.getGridData().cellSize, "#ddd");
                }
            }
        }
    };
    var _blockCells = function(sigil, x, y) {
        for (var i = 0; i < sigil.length; i++) {
            var posX = x + i % 4 * sb.getGridData().cellSize;
            var posY = y + Math.floor(i / 4) * sb.getGridData().cellSize;
            if (posY >= 0) {
                switch (sigil[i][0]) {
                  case 1:
                    _grid[posY / sb.getGridData().cellSize][posX / sb.getGridData().cellSize] = 1;
                    _sigilFix.play();
                    break;

                  case 2:
                    if (typeof _grid[posY / sb.getGridData().cellSize] != "undefined" && typeof _grid[posY / sb.getGridData().cellSize][posX / sb.getGridData().cellSize] != "undefined") {
                        _grid[posY / sb.getGridData().cellSize][posX / sb.getGridData().cellSize] = 0;
                        _grenadeDrop.play();
                    }
                    break;
                }
            }
        }
        sb.setGridData("grid", _grid);
        _checkRows();
    };
    var _checkRows = function() {
        var rowFull = true, numRows = 0, r, c;
        for (r = 0; r < sb.getGridData().rows; r++) {
            rowFull = true;
            for (c = 0; c < sb.getGridData().cols; c++) {
                if (sb.getGridData().grid[r][c] === 0) {
                    rowFull = false;
                    break;
                }
            }
            if (rowFull) {
                numRows++;
                sb.getGridData().grid.splice(r, 1);
                var tempRow = [];
                for (c = 0; c < sb.getGridData().cols; c++) {
                    tempRow.push(0);
                }
                sb.getGridData().grid.unshift(tempRow);
            }
        }
        if (numRows !== 0) sb.publishEvent("row-cleared", [ numRows ]);
    };
    var _updateCell = function(r, c, val) {
        _grid[r][c] = val;
        sb.setGridData("grid", _grid);
    };
    var _onGameStateChange = function(state) {
        var r, c;
        switch (state) {
          case "game-reset":
            for (r = 0; r < sb.getGridData().rows; r++) {
                for (c = 0; c < sb.getGridData().cols; c++) {
                    setTimeout(_updateCell.bind(null, r, c, 0), (r * 10 + c) * 10);
                }
            }
            _gameSoundStart.currentTime = 0;
            _gameSoundStart.play();
            break;

          case "game-stop":
            for (r = 0; r < sb.getGridData().rows; r++) {
                for (c = 0; c < sb.getGridData().cols; c++) {
                    setTimeout(_updateCell.bind(null, r, c, 1), (r * 10 + c) * 10);
                }
            }
            _gameSoundOver.currentTime = 0;
            _gameSoundOver.play();
            break;
        }
    };
    var _init = function() {
        var r, c, row;
        for (r = 0; r < sb.getGridData().rows; r++) {
            row = [];
            for (c = 0; c < sb.getGridData().cols; c++) {
                row.push(1);
            }
            _grid.push(row);
        }
        sb.setGridData("grid", _grid);
        sb.subscribeEvent("game-render", _drawGrid);
        sb.subscribeEvent("sigil-fixed", _blockCells);
        sb.subscribeEvent("game-stateChange", _onGameStateChange);
        _grenadeDrop = new Audio("audio/grenade.mp3");
        _sigilFix = new Audio("audio/sigil-fix.mp3");
        _gameSoundStart = new Audio("audio/game-start.mp3");
        _gameSoundOver = new Audio("audio/game-over.mp3");
    };
    var _destroy = function() {};
    return {
        init: _init,
        destroy: _destroy
    };
});

TETRIS.registerModule("sigil", function(sb) {
    var _sigilRotateSound, _sigilMoveSound;
    var _types = [ [ [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 2 ], [ 2 ], [ 2 ], [ 0 ], [ 2 ], [ 3 ], [ 2 ], [ 0 ], [ 2 ], [ 2 ], [ 2 ], [ 0 ] ], [ [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ] ], [ [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 1 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ] ], [ [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 1 ], [ 0 ], [ 0 ], [ 1 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ] ], [ [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 1 ], [ 1 ], [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ] ], [ [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ] ], [ [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 1 ], [ 1 ], [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ] ], [ [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 1 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ], [ 0 ] ] ];
    var _cellSize, _x, _y;
    var _speed = 2;
    var _tempY = 0;
    var _row = 4;
    var _bomb = false;
    var _currSigil;
    var _numSigils = 0;
    var _draw = function() {
        if (!_currSigil) return;
        for (var i = 0; i < _currSigil.length; i++) {
            var x = _x + Math.floor(i % _row) * _cellSize;
            var y = _y + Math.floor(i / _row) * _cellSize;
            if (_currSigil[i][0] === 1 || _currSigil[i][0] === 3) {
                if (_bomb) sb.drawRect(x, y, _cellSize, _cellSize, "#bf4040"); else sb.drawRect(x, y, _cellSize, _cellSize, "#52bbae");
            } else {}
        }
    };
    var _update = function() {
        _tempY += _speed;
        if (_tempY >= _cellSize) {
            _tempY = 0;
            _move("down");
        }
    };
    var _move = function(dir) {
        if (!_currSigil) return;
        switch (dir) {
          case "right":
            if (_isCellEmpty(_currSigil, _cellSize, 0)) {
                _x += _cellSize;
                _sigilMoveSound.currentTime = 0;
                _sigilMoveSound.play();
            }
            break;

          case "left":
            if (_isCellEmpty(_currSigil, -_cellSize, 0)) {
                _x -= _cellSize;
                _sigilMoveSound.currentTime = 0;
                _sigilMoveSound.play();
            }
            break;

          case "down":
            if (_isCellEmpty(_currSigil, 0, _cellSize)) {
                _y += _cellSize;
            } else {
                sb.publishEvent("sigil-fixed", [ _currSigil, _x, _y ]);
                _spawnSigil();
            }
            break;
        }
    };
    var _rotate = function() {
        if (_bomb) return;
        var tempSigil = [];
        var i = 0;
        tempSigil.length = _currSigil.length;
        for (i = 0; i < _currSigil.length; i++) {
            var x = i % _row;
            var y = Math.floor(i / _row);
            var newX = _row - y - 1;
            var newY = x;
            var newIndex = newY * _row + newX;
            tempSigil[newIndex] = _currSigil[i];
        }
        if (_hasSpaceToBe(tempSigil)) {
            _currSigil = tempSigil;
            _sigilRotateSound.currentTime = 0;
            _sigilRotateSound.play();
        }
    };
    var _levelUp = function() {
        _speed += 1;
    };
    var _hasSpaceToBe = function(sigil) {
        var x, y;
        for (i = 0; i < sigil.length; i++) {
            if (sigil[i] == 1) {
                x = _x + Math.floor(i % _row) * _cellSize;
                y = _y + Math.floor(i / _row) * _cellSize;
                if (x < 0) {
                    if (_isCellEmpty(sigil, _cellSize, 0)) {
                        _x += x * -1;
                        return true;
                    } else {
                        return false;
                    }
                }
                if (x >= sb.getGridData().width) {
                    if (_isCellEmpty(sigil, -_cellSize, 0)) {
                        _x += x - (sb.getGridData().width + _cellSize);
                        return true;
                    } else {
                        return false;
                    }
                }
                if (y >= sb.getGridData().height) {
                    _y += y - (sb.getGridData().height + _cellSize);
                    return true;
                }
                if (sb.checkCell(x, y) === 1) {
                    if (x - _x >= 80) {
                        if (_isCellEmpty(sigil, -_cellSize, 0)) {
                            _x -= _cellSize;
                            return true;
                        } else {
                            return false;
                        }
                    } else {
                        if (_isCellEmpty(sigil, +_cellSize, 0)) {
                            _x += _cellSize;
                            return true;
                        } else {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    };
    var _isCellEmpty = function(sigil, xOffset, yOffset) {
        for (i = 0; i < sigil.length; i++) {
            var x = _x + Math.floor(i % _row) * _cellSize + xOffset;
            var y = _y + Math.floor(i / _row) * _cellSize + yOffset;
            if (sigil[i] == 1 || sigil[i] == 3) {
                if (x < 0 || x >= sb.getGridData().width) {
                    return false;
                }
                if (y >= sb.getGridData().height) {
                    return false;
                }
                if (sb.checkCell(x, y) === 1) {
                    return false;
                }
            }
        }
        return true;
    };
    var _keyDownListener = function(e) {
        switch (e.keyCode) {
          case 37:
            _move("left");
            break;

          case 38:
            _rotate();
            break;

          case 39:
            _move("right");
            break;

          case 40:
            _move("down");
            break;
        }
    };
    var _spawnSigil = function() {
        _x = 3 * _cellSize;
        _y = 0;
        if (Math.random() < .08 && _numSigils !== 0) {
            _bomb = true;
            _currSigil = _types[0];
        } else {
            _bomb = false;
            var rand = Math.floor(Math.random() * (_types.length - 1)) + 1;
            _currSigil = _types[rand];
        }
        if (_isCellEmpty(_currSigil, 0, -_cellSize)) _y -= _cellSize;
        if (!_hasSpaceToBe(_currSigil)) {
            sb.publishEvent("game-stateChange", [ "game-stop" ]);
        }
        _numSigils++;
    };
    var _destroySigil = function() {
        _currSigil = [];
    };
    var _onGameStateChange = function(state) {
        var r, c;
        switch (state) {
          case "game-reset":
            _speed = 2;
            _tempY = 0;
            _bomb = false;
            _numSigils = 0;
            break;

          case "game-play":
            _spawnSigil();
            sb.addEventListener(window, "keydown", _keyDownListener);
            break;

          case "game-resume":
            sb.addEventListener(window, "keydown", _keyDownListener);
            break;

          case "game-pause":
            sb.removeEventListener(window, "keydown", _keyDownListener);
            break;

          case "game-stop":
            _destroySigil();
            sb.removeEventListener(window, "keydown", _keyDownListener);
            break;
        }
    };
    var _init = function() {
        _cellSize = sb.getGridData().cellSize;
        sb.subscribeEvent("game-stateChange", _onGameStateChange);
        sb.subscribeEvent("game-render", _draw);
        sb.subscribeEvent("game-update", _update);
        sb.subscribeEvent("level-up", _levelUp);
        _sigilMoveSound = new Audio("audio/sigil-move.mp3");
        _sigilRotateSound = new Audio("audio/sigil-rotate.mp3");
    };
    var _destroy = function() {};
    return {
        init: _init,
        destroy: _destroy
    };
});

TETRIS.initGame("game-canvas", 250, 500, 25);

TETRIS.initModule("game-loop");

TETRIS.initModule("grid");

TETRIS.initModule("sigil");

TETRIS.initModule("game-controller");

TETRIS.initModule("game-keeper");